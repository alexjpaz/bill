#cloud-config

coreos:
  update:
    reboot-strategy: off
  etcd:
    #generate a new token for each unique cluster from https://discovery.etcd.io/new
    discovery: https://discovery.etcd.io/e3b1c5ddcb23632f6487dd27a2c93c4a
    addr: $public_ipv4:4001
    peer-addr: $public_ipv4:7001
  fleet:
    public-ip: $public_ipv4
  units:
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
    - name: docker.service
      command: restart
      content: |
        [Unit]
        Description=Docker Application Container Engine 
        Documentation=http://docs.docker.io
        After=network.target
        [Service]
        ExecStartPre=/bin/mount --make-rprivate /
        # Run docker but don't have docker automatically restart
        # containers. This is a job for systemd and unit files.
        ExecStart=/usr/bin/docker -d -s=btrfs -r=false -H fd:// -D --dns=$private_ipv4 --dns=8.8.8.8

        [Install]
        WantedBy=multi-user.target
    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Socket for the API

        [Socket]
        ListenStream=2375
        Service=docker.service
        BindIPv6Only=both

        [Install]
        WantedBy=sockets.target
    - name: cadvisor.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Analyzes resource usage and performance characteristics of running containers.
        After=docker.service
        Requires=docker.service

        After=etcd.service
        Requires=etcd.service
        After=fleet.service
        Requires=fleet.service

        [Service]
        Restart=always
        ExecStart=/usr/bin/docker run --volume=/var/run:/var/run:rw --volume=/sys/fs/cgroup/:/sys/fs/cgroup:ro --volume=/var/lib/docker/:/var/lib/docker:ro --publish=8080:8080 --name=cadvisor google/cadvisor:latest
        ExecStop=/usr/bin/docker stop -t 2 google/cadvisor
    - name: swap.service
      command: start
      content: |
        [Unit]
        Description=Turn on swap

        [Service]
        Type=oneshot
        Environment="SWAPFILE=/2GiB.swap"
        RemainAfterExit=true
        ExecStartPre=/usr/sbin/losetup -f ${SWAPFILE}
        ExecStart=/usr/bin/sh -c "/sbin/swapon $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)"
        ExecStop=/usr/bin/sh -c "/sbin/swapoff $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)"
        ExecStopPost=/usr/bin/sh -c "/usr/sbin/losetup -d $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)"

        [Install]
        WantedBy=local.target
    - name: bill-dnsmasq.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=*.bill traffic will go to the private_ipv4 addr
        After=docker.service
        Requires=docker.service

        After=etcd.service
        Requires=etcd.service
        After=fleet.service
        Requires=fleet.service


        [Service]
        Restart=always
        ExecStart=/usr/bin/docker run -p $private_ipv4:53:53/udp --privileged --name=bill-dnsmasq tomgco/dnsmasq-catch bill $private_ipv4
        ExecStop=/usr/bin/docker stop -t 2 tomgco/dnsmasq-catch
    - name: bill-haproxy.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=bill HAProxy instance that enables service discovery.
        After=docker.service
        Requires=docker.service

        After=etcd.service
        Requires=etcd.service
        After=fleet.service
        Requires=fleet.service

        [Service]
        User=core
        Restart=always
        RestartSec=5s
        ExecStartPre=/usr/bin/docker pull quay.io/yldio/bill-haproxy:latest
        ExecStartPre=-/bin/bash -c "docker inspect bill-haproxy >/dev/null 2>&1 && docker rm -f bill-haproxy || true"
        ExecStart=/usr/bin/docker run -p 80:80 -p 1936:1936 -e ETCD=$private_ipv4:4001 --name bill-haproxy quay.io/yldio/bill-haproxy
        ExecStop=/usr/bin/docker rm -f bill-haproxy
        TimeoutStartSec=20m
    - name: bill-pubkey-watcher.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Watch etcd for scheduler public key changes and update authorized_hosts.

        After=etcd.service
        Requires=etcd.service
        After=fleet.service
        Requires=fleet.service

        [Service]
        User=core
        Restart=always
        ExecStartPre=/home/core/bin/bill-pubkey-watcher.sh once
        ExecStart=/home/core/bin/bill-pubkey-watcher.sh

write_files:
  - path: /home/core/.dockercfg
    content: |
        {"__DOCKER_REGISTRY__":{"auth":"__DOCKER_AUTH__","email":"__DOCKER_EMAIL__"}}
  - path: /etc/bill-environment
    permissions: 0644
    content: |
        BILL_PLATFORM=digitalocean
        BILL_DOMAIN=lukeb0nd.com
        BILL_DNSIMPLE_APIKEY=
        BILL_DNSIMPLE_EMAIL=
  - path: /home/core/bin/bill-pubkey-watcher.sh
    owner: core
    permissions: 0754
    content: |
        #!/bin/bash
        set -e
        if [[ "$1" == "once" ]]; then
          FN=`mktemp /tmp/bill-pubkey.XXXX`
          until etcdctl get /bill/config/scheduler/_pubkey 2>/dev/null > $FN.tmp; do sleep 2; done && base64 -d < $FN.tmp > $FN && /usr/bin/update-ssh-keys -u core -a bill-scheduler $FN
          rm $FN $FN.tmp
        else
          while :; do
            FN=`mktemp /tmp/bill-pubkey.XXXX`
            etcdctl watch /bill/config/scheduler/_pubkey | base64 -d > $FN && /usr/bin/update-ssh-keys -u core -a bill-scheduler $FN;
            rm $FN
          done;
        fi
